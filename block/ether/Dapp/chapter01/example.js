const Web3 = require('web3')
let connection = new Web3('http://127.0.0.1:8545')

// eth_accounts
connection.eth.getAccounts().then( data => {
    console.log(data)
} )

// eth_getBalacne
connection.eth.getBalance('0x7FE1d66b97cB4F8834293A231dC664a105f338B2')
.then( data => {
    console.log(data) // 16진수 리턴이아니라. 10진수로 리턴해줍니다.
} )

/*
    RPC 통신하는 부분인데 
    request 를 통해서 작업했었엇죠.
    web3개념은 진짜중요합니다. 
*/

/* 스마트 컨트랙트  */
/*
    코드(솔리디티)를 RPC통신을 통해서 실행시킨다. 

    솔리디티를 실행시킬려면 어떻게해야하나요 ?
    컴파일라는 과정을 해야합니다.

    
    hello.sol -> 컴파일 -> abi 파일과 bin파일

    abi : Application binary Interface 런타임시  
    바이너리 코드와 데이터 실행시키기위한 JSON 파일

    bin : 바이너리 파일로 결과물줍니다
    01564165498456416116879798465432165496789794561231654987946513216549879

    코드를 실행시키는 키값이라 생각해주세요.

    1. 솔리디티 코드를 작성합니다. visual studio code에서 작성
    2. 솔리디티 코드를 컴파일합니다.  npm install solc

    solc --bin --abi [파일경로]

    파일을 생성해줍시다 hello.sol 


*/
const ABI_CODE = JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"get","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]')
const BYTECODE = '608060405234801561001057600080fd5b506040518060400160405280600c81526020017f68656c6c6f20776f726c642100000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b50610166565b82805461006e90610134565b90600052602060002090601f01602090048101928261009057600085556100d7565b82601f106100a957805160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d65782518255916020019190600101906100bb565b5b5090506100e491906100e8565b5090565b5b808211156101015760008160009055506001016100e9565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061014c57607f821691505b602082108114156101605761015f610105565b5b50919050565b610232806101756000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d4ce63c14610030575b600080fd5b61003861004e565b6040516100459190610179565b60405180910390f35b60606000805461005d906101ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610089906101ca565b80156100d65780601f106100ab576101008083540402835291602001916100d6565b820191906000526020600020905b8154815290600101906020018083116100b957829003601f168201915b5050505050905090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561011a5780820151818401526020810190506100ff565b83811115610129576000848401525b50505050565b6000601f19601f8301169050919050565b600061014b826100e0565b61015581856100eb565b93506101658185602086016100fc565b61016e8161012f565b840191505092915050565b600060208201905081810360008301526101938184610140565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806101e257607f821691505b602082108114156101f6576101f561019b565b5b5091905056fea264697066735822122027001aedd38e68925eaefb9bb36fb2e7d49509ad14c8dda00f3146341ddad7b964736f6c63430008090033'

// const contract = new connection.eth.Contract(ABI_CODE)

// // 배포 -> 코드를 실행할거야. deploy 
// // 코드를 실행하니깐 가스가 발생함.
// contract.deploy({
//     data:BYTECODE
// })
// .send({
//     from:'0x7FE1d66b97cB4F8834293A231dC664a105f338B2',
//     gas:'6721975'
// },(error,result)=>{
//     console.log(error)
// })
// .then( data=>{
//     console.log(data.options.address)
//     //return data.methods.get().call()
// } )
// 0x1E89C70a3b09A79172d07Eb9BFc9fFD116d52FCc

const helloContract = new connection.eth.Contract(ABI_CODE,'0x1E89C70a3b09A79172d07Eb9BFc9fFD116d52FCc')

helloContract.methods.get().call().then( data=> {
    console.log(data)
})

// 스마트컨트랙트 배포하기. 